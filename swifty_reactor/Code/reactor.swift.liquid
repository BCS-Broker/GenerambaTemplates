//
//  {{ module_info.name }}{{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ year }} {{ developer.company }}. All rights reserved.
//

import RxSwift
import ModuleCore
import BrokerData

public final class {{ module_info.name }}Reactor: BaseReactor, FullSceneReactor {
    
    // MARK: - Public properties   
    public typealias Coordinator = {{ module_info.name }}Coordinator
    public typealias Interactor = {{ module_info.name }}Interactor
    
    public enum Action {
        case initLoad
    }
    
    public enum Mutation {
        case setBusy(Bool)
        case setInitData(<#InitData#>)
    }
    
    public struct State { 
        var isBusy = false
        var initData: <#InitData#>? = nil
    }

    public let initialState = State()

    // MARK: - Private properties

    // MARK: - init
    
    override init() {
        super.init()
    }

    // MARK: - Public functions 
    public func mutate(action: Action) -> Observable<Mutation> {
        switch action {
        case .initLoad:
            loadData() 
        }
        return .empty()
    }
    
    public func reduce(state: State, mutation: Mutation) -> State {
        var state = state
        
        switch mutation { 
        case let .setInitData(val): state.data = val 
        case let .setBusy(val): state.isBusy = val 
        }
        
        return state
    }
}

// MARK: - Private functions
fileprivate extension {{ module_info.name }}Reactor {
    func loadData() {
        interact(interactor.<#name#>,
                 complete: {{ module_info.name }}Reactor.dataLoaded,
                 error: {{ module_info.name }}Reactor.interactionFailed,
                 inProgress: Mutation.isBusy)
    }

    func dataLoaded(data: <#InitData#>) {
        make(.setInitData(data))
    }

    func interactionFailed(_ error: Error = InterruptedError()) {
        debugPrint("interactionFailed", error)
    }
}

